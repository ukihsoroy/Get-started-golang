// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package hello

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"regexp"
	"strings"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type HelloWorldService interface {
	// Parameters:
	//  - Username
	Say(ctx context.Context, username string) (_r string, _err error)
}

type HelloWorldServiceClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewHelloWorldServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HelloWorldServiceClient {
	return &HelloWorldServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewHelloWorldServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HelloWorldServiceClient {
	return &HelloWorldServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewHelloWorldServiceClient(c thrift.TClient) *HelloWorldServiceClient {
	return &HelloWorldServiceClient{
		c: c,
	}
}

func (p *HelloWorldServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *HelloWorldServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *HelloWorldServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//   - Username
func (p *HelloWorldServiceClient) Say(ctx context.Context, username string) (_r string, _err error) {
	var _args0 HelloWorldServiceSayArgs
	_args0.Username = username
	var _result2 HelloWorldServiceSayResult
	var _meta1 thrift.ResponseMeta
	_meta1, _err = p.Client_().Call(ctx, "say", &_args0, &_result2)
	p.SetLastResponseMeta_(_meta1)
	if _err != nil {
		return
	}
	return _result2.GetSuccess(), nil
}

type HelloWorldServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      HelloWorldService
}

func (p *HelloWorldServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HelloWorldServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HelloWorldServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHelloWorldServiceProcessor(handler HelloWorldService) *HelloWorldServiceProcessor {

	self3 := &HelloWorldServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["say"] = &helloWorldServiceProcessorSay{handler: handler}
	return self3
}

func (p *HelloWorldServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x4.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x4

}

type helloWorldServiceProcessorSay struct {
	handler HelloWorldService
}

func (p *helloWorldServiceProcessorSay) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err5 error
	args := HelloWorldServiceSayArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "say", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := HelloWorldServiceSayResult{}
	if retval, err2 := p.handler.Say(ctx, args.Username); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc6 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing say: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "say", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err5 = thrift.WrapTException(err2)
		}
		if err2 := _exc6.Write(ctx, oprot); _write_err5 == nil && err2 != nil {
			_write_err5 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err5 == nil && err2 != nil {
			_write_err5 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err5 == nil && err2 != nil {
			_write_err5 = thrift.WrapTException(err2)
		}
		if _write_err5 != nil {
			return false, thrift.WrapTException(_write_err5)
		}
		return true, err
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "say", thrift.REPLY, seqId); err2 != nil {
		_write_err5 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err5 == nil && err2 != nil {
		_write_err5 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err5 == nil && err2 != nil {
		_write_err5 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err5 == nil && err2 != nil {
		_write_err5 = thrift.WrapTException(err2)
	}
	if _write_err5 != nil {
		return false, thrift.WrapTException(_write_err5)
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - Username
type HelloWorldServiceSayArgs struct {
	Username string `thrift:"username,1" db:"username" json:"username"`
}

func NewHelloWorldServiceSayArgs() *HelloWorldServiceSayArgs {
	return &HelloWorldServiceSayArgs{}
}

func (p *HelloWorldServiceSayArgs) GetUsername() string {
	return p.Username
}
func (p *HelloWorldServiceSayArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HelloWorldServiceSayArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *HelloWorldServiceSayArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "say_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HelloWorldServiceSayArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err)
	}
	return err
}

func (p *HelloWorldServiceSayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloWorldServiceSayArgs(%+v)", *p)
}

// Attributes:
//   - Success
type HelloWorldServiceSayResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHelloWorldServiceSayResult() *HelloWorldServiceSayResult {
	return &HelloWorldServiceSayResult{}
}

var HelloWorldServiceSayResult_Success_DEFAULT string

func (p *HelloWorldServiceSayResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return HelloWorldServiceSayResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *HelloWorldServiceSayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HelloWorldServiceSayResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HelloWorldServiceSayResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *HelloWorldServiceSayResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "say_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HelloWorldServiceSayResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HelloWorldServiceSayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloWorldServiceSayResult(%+v)", *p)
}
